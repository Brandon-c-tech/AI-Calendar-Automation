import requests
import json
from pydantic import BaseModel
from openai import OpenAI

# API configuration parameters
GRANT_ID = "<GRANT_ID>"
API_KEY = "<API_KEY>"
CALENDAR_ID = "<CALENDAR_ID>"

# Function to retrieve all calendars
def get_calendars(grant_id, api_key):
    url = f'https://api.us.nylas.com/v3/grants/{grant_id}/calendars'
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    response = requests.get(url, headers=headers)
    return response.json()

# Function to retrieve events from a specific calendar
def get_events(grant_id, api_key, calendar_id, limit=5):
    url = f'https://api.us.nylas.com/v3/grants/{grant_id}/events?calendar_id={calendar_id}&limit={limit}'
    headers = {
        'Accept': 'application/json',
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    response = requests.get(url, headers=headers)
    return response.json()

# Function to create a new event
def create_event(grant_id, api_key, calendar_id, event_data):
    url = f'https://api.us.nylas.com/v3/grants/{grant_id}/events?calendar_id={calendar_id}'
    headers = {
        'Accept': 'application/json',
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    response = requests.post(url, headers=headers, data=json.dumps(event_data))
    return response.json()

# Define structured event model
class CalendarEvent(BaseModel):
    title: str
    description: str
    when: str
    location: str
    participants: list[str]

# Initialize OpenAI client
client = OpenAI()

# Function to parse event description using OpenAI
def parse_event_description(description):
    completion = client.beta.chat.completions.parse(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "Extract the event information. Missing parts fill with 'unknown'"},
            {"role": "user", "content": description},
        ],
        response_format=CalendarEvent,
    )
    return completion.choices[0].message.content

# Function to build event data from parsed OpenAI output
def build_event_data(parsed_event):
    event_data = {
        "title": parsed_event.title,
        "status": "confirmed",
        "busy": True,
        "participants": [{"name": participant.split()[0], "email": participant} for participant in parsed_event.participants],
        "description": parsed_event.description,
        "when": {
            "object": "timespan",
            "start_time": 1723683600,  # Replace with actual start time
            "end_time": 1723687200      # Replace with actual end time
        },
        "location": parsed_event.location
    }
    return event_data

# Example usage
def calendar_test():
    # Retrieve calendars
    calendars = get_calendars(GRANT_ID, API_KEY)
    print("Calendars:", calendars)

    # Retrieve events
    events = get_events(GRANT_ID, API_KEY, CALENDAR_ID, limit=5)
    print("Events:", events)

    # Use event description generated by OpenAI
    description = "Alice and Bob are going to a science fair on Friday."
    parsed_event = parse_event_description(description)

    # Build event data
    event_data = build_event_data(parsed_event)

    # Create new event
    new_event = create_event(GRANT_ID, API_KEY, CALENDAR_ID, event_data)
    print("New Event:", new_event)

# Run the test function
calendar_test()
